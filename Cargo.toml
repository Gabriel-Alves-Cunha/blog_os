[package]
authors = ["Gabriel Alves Cunha <gabriel925486@gmail.com>"]
edition = "2018"
name = "blog_os"
version = "0.1.0"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
bootloader = { version = "0.9.11", features = ["map_physical_memory"] } 
pc-keyboard = "0.5.1" 
pic8259_simple = "0.2.0" 
spin = "0.7.0" 
uart_16550 = "0.2.10" 
volatile = "0.2.6" # The 0.4.x doesn't work with this implementation && page_03: The problem is that we only write to the Buffer and never read from it again. The compiler doesn't know that we really access VGA buffer memory (instead of normal RAM) and knows nothing about the side effect that some characters appear on the screen. So it might decide that these writes are unnecessary and can be omitted. To avoid this erroneous optimization, we need to specify these writes as volatile. This tells the compiler that the write has side effects and should not be optimized away.
x86_64 = "0.12.1" 
linked_list_allocator = "0.8.6" 

[dependencies.lazy_static]
features = ["spin_no_std"]
version = "1.4.0"

[dependencies.crossbeam-queue]
version = "0.2.1" # Only works with this version
default-features = false
features = ["alloc"]

[dependencies.conquer-once]
version = "0.3.0"
default-features = false

[dependencies.futures-util]
version = "0.3.8"
default-features = false
features = ["alloc"]

[package.metadata.bootimage]
test-args = [
  "-device",
  "isa-debug-exit,iobase=0xf4,iosize=0x04",
  "-serial",
  "stdio",
  "-display",
  "none",
] 
test-success-exit-code = 33 # (0x10 << 1) | 1
test-timeout = 300 # seconds

[[test]]
harness = false
name = "should_panic"

[[test]]
harness = false
name = "stack_overflow"
